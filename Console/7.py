from matplotlib import pyplot as plt
import pandas as pd

# List comprehensions###################################################
doctor = ['house', 'cuddy', 'chase', 'thirteen', 'wilson']

op = map(lambda x: x[0], doctor)
print(list(op))  # ['h', 'c', 'c', 't', 'w']

result = [doc[0] for doc in doctor]
print(result)  # ['h', 'c', 'c', 't', 'w']

# Create list comprehension: squares
squares = [i**2 for i in range(0, 10)]
print(squares)  # [0, 1, 4, 9, 16, 25, 36, 49, 64, 81]

# Creating a matrix of 5 * 5 ###################################################
# Create a 5 x 5 matrix using a list of lists: matrix
matrix = [[col for col in range(5)] for row in range(5)]

# Print the matrix
for row in matrix:
    print(row)

# Comprehensions- list,dictionary with conditions###################################################
# Create a list of strings: fellowship
fellowship = ['frodo', 'samwise', 'merry',
              'aragorn', 'legolas', 'boromir', 'gimli']

# Create list comprehension: new_fellowship
new_fellowship = [member for member in fellowship if (len(member) >= 7)]

# Print the new list
print(new_fellowship)  # ['samwise', 'aragorn', 'legolas', 'boromir']

# Create list comprehension: new_fellowship
new_fellowship = [member if (len(member) >= 7)
                  else '' for member in fellowship]

# Print the new list
# ['', 'samwise', '', 'aragorn', 'legolas', 'boromir', '']
print(new_fellowship)

# Create a list of strings: fellowship
fellowship = ['frodo', 'samwise', 'merry',
              'aragorn', 'legolas', 'boromir', 'gimli']

# Create dict comprehension: new_fellowship
new_fellowship = {member: len(member) for member in fellowship}

# Print the new dictionary
# {'frodo': 5, 'samwise': 7, 'merry': 5, 'aragorn': 7, 'legolas': 7, 'boromir': 7, 'gimli': 5}
print(new_fellowship)


# Generators######################################################################################################
# Genearators has the lazy evaluation
# Create a list of strings: lannister
lannister = ['cersei', 'jaime', 'tywin', 'tyrion', 'joffrey']

# Create a generator object: lengths
lengths = (len(person) for person in lannister)
print(next(lengths))  # 6 >> lenght of cersei

# Iterate over and print the values in lengths
for value in lengths:
    print(value)
# 5
# 5
# 6
# 7

# Define generator function get_lengths


def get_lengths(input_list):
    """Generator function that yields the
    length of the strings in input_list."""

    # Yield the length of a string
    for person in input_list:
        yield len(person)


# Print the values generated by get_lengths()
for value in get_lengths(lannister):
    print(value)
# 6
# 5
# 5
# 6
# 7


# program realistic###########################################################################################
def plot_pop(filename, country_code):

    # Initialize reader object: urb_pop_reader
    urb_pop_reader = pd.read_csv(filename, chunksize=1000)

    # Initialize empty DataFrame: data
    data = pd.DataFrame()

    # Iterate over each DataFrame chunk
    for df_urb_pop in urb_pop_reader:
        # Check out specific country: df_pop_ceb
        df_pop_ceb = df_urb_pop[df_urb_pop['CountryCode'] == country_code]

        # Zip DataFrame columns of interest: pops
        pops = zip(df_pop_ceb['Total Population'],
                   df_pop_ceb['Urban population (% of total)'])

        # Turn zip object into list: pops_list
        pops_list = list(pops)

        # Use list comprehension to create new DataFrame column 'Total Urban Population'
        df_pop_ceb['Total Urban Population'] = [
            int(tup[0] * tup[1] * 0.01) for tup in pops_list]

        # Concatenate DataFrame chunk to the end of data: data
        data = pd.concat([data, df_pop_ceb])

    # Plot urban population data
    data.plot(kind='scatter', x='Year', y='Total Urban Population')
    plt.show()


# Call plot_pop for country code 'CEB'
plot_pop('datasets/ind_pop_data.csv', 'CEB')

# Call plot_pop for country code 'ARB'
plot_pop('datasets/ind_pop_data.csv', 'ARB')
